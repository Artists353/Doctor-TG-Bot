from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove, PreCheckoutQuery, LabeledPrice, CallbackQuery
from aiogram.client.default import DefaultBotProperties

from keyboards import agree_kb
from keyboards import tariffs_kb
from keyboards import pay_inkb
from bot import Bot
router = Router()

CURRENCY = "RUB"
PROVIDER_TOKEN = "s"

@router.message(Command("start"))
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üîπ\n" \
    "üìΩ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –õ–§–ö, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è:\n" \
    "‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º –∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π\n" \
    "‚Äî –º—è–≥–∫–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏ –ø—Ä–∏ –±–æ–ª—è—Ö\n" \
    "‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏ –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ\n\n" \
    " üõí –í—ã –º–æ–∂–µ—Ç–µ:\n" \
    "‚Ä¢ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å\n" \
    "‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å\n" \
    "‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n\n" \
    "üë©‚Äç‚öïÔ∏è –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –º—ã –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª.\n\n" \
    "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è\n", 
    reply_markup=agree_kb)


@router.message(lambda message: message.text and message.text.lower() == "—Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
async def answer_agree(message: Message):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¢–∞—Ä–∏—Ñ—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞—Ä–∏—Ñ–∞–º, –∏–ª–∏ –ù–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ Start.",
        reply_markup=tariffs_kb
    )
    
@router.message(lambda message: message.text and message.text.lower() == "—Ç–∞—Ä–∏—Ñ—ã")
async def answer_tariffs(message: Message):
    await message.answer("–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=pay_inkb)


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.callback_query()
async def process_callback_query(callback_query: types.CallbackQuery, bot: Bot) -> None:
    prices = []
    description = '–ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ.'
    prices = [LabeledPrice(label="–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞: ", amount=100)]
    
    if prices:
        await bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title='–ü–æ–∫—É–ø–∫–∞ –¢–∞—Ä–∏—Ñ–∞',
            description=description,
            provider_token=PROVIDER_TOKEN,
            prices=prices,
            currency=CURRENCY
        )


@router.message(F.successful_payment)
async def process_successful_payment(message: Message) -> None:
    payload_to_message = {'–¢–∞—Ä–∏—Ñ'}
    response_message = payload_to_message.get(message.successful_payment.invoice_payload, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!")
    await message.answer(response_message)


@router.message(lambda message: message.text and message.text.lower() == "–Ω–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è")
async def answer_disagree(message: Message):
    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É.", reply_markup=agree_kb)

@router.message(lambda message: message.text and message.text.lower() == "–Ω–∞–∑–∞–¥")
async def answer_disagree(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.", reply_markup=agree_kb)